import React, { useState, useEffect, useMemo } from "react";
import "./App.css";
import "./styles/theme.css";
import { ThemeProvider } from "./contexts/ThemeContext";
import { UserProvider, useUser } from "./contexts/UserContext";

// Components
import MainLayout from "./components/MainLayout";
import WinnerScreen from "./components/WinnerScreen";
import PublicTournamentView from "./components/PublicTournamentView";
import { ModernToast } from "./components/ModernToast";
import { ProtectedRoute } from "./components/auth/ProtectedRoute";
import { UserHeader } from "./components/UserHeader";
import { AuthCallback } from "./components/auth/AuthCallback";
import { AdminProvider, useAdmin } from "./contexts/AdminContext";
import { AdminLogin } from "./components/admin/AdminLogin";
import { AdminDashboard } from "./components/admin/AdminDashboard";
import { AdminRoute } from "./components/admin/AdminRoute";
import { testConnection } from "./lib/supabaseClient";

// Types
import { Tournament, Player } from "./lib/database";

// Custom Hooks
import { useTournamentData } from "./hooks/useTournamentData";
import { usePairManagement } from "./hooks/usePairManagement";
import { useTournamentActions } from "./hooks/useTournamentActions";
import { useToastNotifications } from "./hooks/useToastNotifications";
import { useWinnerCalculation } from "./hooks/useWinnerCalculation";

function AppContent() {
  const { user } = useUser();

  // Estados b치sicos
  const [selectedTournament, setSelectedTournament] =
    useState<Tournament | null>(null);
  const [currentView, setCurrentView] = useState<
    | "main"
    | "winner"
    | "public"
    | "auth-callback"
    | "admin-login"
    | "admin-dashboard"
  >("main");
  const [publicTournamentId, setPublicTournamentId] = useState<string | null>(
    null
  );
  const [forceRefresh, setForceRefresh] = useState(0);
  const [, setError] = useState<string>("");

  // Detectar si estamos en la ruta de callback de autenticaci칩n
  useEffect(() => {
    const currentPath = window.location.pathname;
    if (currentPath === "/auth/callback") {
      setCurrentView("auth-callback");
    } else if (currentPath === "/admin-login") {
      setCurrentView("admin-login");
    } else if (currentPath === "/admin-dashboard") {
      setCurrentView("admin-dashboard");
    } else {
      // Si no es una ruta espec칤fica, volver a la vista principal
      setCurrentView("main");
    }
  }, []);

  // Estados de UI
  const [showPlayerManager, setShowPlayerManager] = useState(false);
  const [showPairManager, setShowPairManager] = useState(false);
  const [showTournamentStatus, setShowTournamentStatus] = useState(false);
  const [showDebugInfo, setShowDebugInfo] = useState(false);
  const [selectedPlayers, setSelectedPlayers] = useState<Player[]>([]);

  // Custom hooks
  const { toast, showToast, hideToast } = useToastNotifications();
  const {
    pairs,
    setPairs,
    matches,
    setMatches,
    pairStats,
    loading,
    loadTournamentData,
  } = useTournamentData();
  const {
    tournamentWinner,
    showWinnerScreen,
    calculateAndShowWinner,
    hideWinnerScreen,
  } = useWinnerCalculation();

  // Pair management
  const { deletePair, updatePairPlayers, addPair } = usePairManagement(
    pairs,
    setPairs,
    selectedTournament,
    setSelectedPlayers,
    setError,
    showToast,
    user?.id
  );

  // Tournament actions
  const {
    startTournament,
    resetTournament,
    loading: actionLoading,
  } = useTournamentActions(
    setSelectedTournament,
    setMatches,
    () => selectedTournament && loadTournamentData(selectedTournament),
    showToast,
    setError
  );

  // Detectar vista p칰blica
  useEffect(() => {
    const path = window.location.pathname;
    const publicMatch = path.match(/^\/public\/([a-f0-9-]+)$/);

    if (publicMatch) {
      const tournamentId = publicMatch[1];
      setPublicTournamentId(tournamentId);
      setCurrentView("public");
    }
  }, []);

  // Probar conexi칩n a Supabase (solo una vez)
  useEffect(() => {
    const testOnce = async () => {
      await testConnection();
    };
    testOnce();
  }, []);

  // Cargar datos cuando se selecciona torneo
  useEffect(() => {
    if (selectedTournament) {
      loadTournamentData(selectedTournament);
    }
  }, [selectedTournament?.id, loadTournamentData]);

  // Recargar datos autom치ticamente
  useEffect(() => {
    if (selectedTournament && forceRefresh > 0) {
      console.log("游댃 Recargando datos debido a forceRefresh:", forceRefresh);
      loadTournamentData(selectedTournament);
    }
  }, [forceRefresh, selectedTournament, loadTournamentData]);

  // Utilidades
  const generatePublicLink = (tournamentId: string) => {
    const baseUrl = window.location.origin;
    return `${baseUrl}/public/${tournamentId}`;
  };

  const copyPublicLink = async (tournamentId: string) => {
    try {
      const publicLink = generatePublicLink(tournamentId);
      await navigator.clipboard.writeText(publicLink);
      showToast("춰Enlace p칰blico copiado al portapapeles!", "success");
    } catch (err) {
      showToast("Error al copiar el enlace", "error");
    }
  };

  // Handlers
  const handleStartTournament = () =>
    startTournament(selectedTournament!, pairs, user?.id || "");
  const handleReset = () => resetTournament(selectedTournament!, pairs);
  const handleShowWinner = () =>
    calculateAndShowWinner(pairs, matches, setCurrentView);
  const handleHideWinner = () => hideWinnerScreen(setCurrentView);

  const handleBackToHome = () => {
    setSelectedTournament(null);
    setPairs([]);
    setMatches([]);
    setError("");
    setCurrentView("main");
    setForceRefresh(0);
    setShowDebugInfo(false);
  };

  // Computed values
  const matchesByRound = matches.reduce((acc, match) => {
    const round = match.round || 1;
    if (!acc[round]) acc[round] = [];
    acc[round].push(match);
    return acc;
  }, {} as Record<number, any[]>);

  const sortedPairs = useMemo(() => {
    return [...pairs].sort((a, b) => {
      const nameA = `${a.player1_name}/${a.player2_name}`;
      const nameB = `${b.player1_name}/${b.player2_name}`;
      return nameA.localeCompare(nameB);
    });
  }, [pairs]);

  const isTournamentFinished = useMemo(() => {
    return (
      matches.length > 0 &&
      matches.every((match) => match.status === "finished")
    );
  }, [matches]);

  const winner = useMemo(() => {
    return (
      tournamentWinner?.pair || (sortedPairs.length > 0 ? sortedPairs[0] : null)
    );
  }, [tournamentWinner, sortedPairs]);

  return (
    <ThemeProvider>
      <UserProvider>
        <AdminProvider>
          <AppWithAdmin />
        </AdminProvider>
      </UserProvider>
    </ThemeProvider>
  );
}

function AppWithAdmin() {
  const { user } = useUser();
  const { isAdminLoggedIn } = useAdmin();

  // Estados b치sicos
  const [selectedTournament, setSelectedTournament] =
    useState<Tournament | null>(null);
  const [currentView, setCurrentView] = useState<
    "main" | "winner" | "public" | "auth-callback" | "admin-login" | "admin-dashboard"
  >("main");
  const [publicTournamentId, setPublicTournamentId] = useState<string | null>(
    null
  );
  const [forceRefresh, setForceRefresh] = useState(0);
  const [, setError] = useState<string>("");

  // Detectar si estamos en la ruta de callback de autenticaci칩n
  useEffect(() => {
    const currentPath = window.location.pathname;
    if (currentPath === "/auth/callback") {
      setCurrentView("auth-callback");
    } else if (currentPath === "/admin-login") {
      setCurrentView("admin-login");
    } else if (currentPath === "/admin-dashboard") {
      setCurrentView("admin-dashboard");
    } else {
      // Si no es una ruta espec칤fica, volver a la vista principal
      setCurrentView("main");
    }
  }, []);

  // Estados de UI
  const [showPlayerManager, setShowPlayerManager] = useState(false);
  const [showPairManager, setShowPairManager] = useState(false);
  const [showTournamentStatus, setShowTournamentStatus] = useState(false);
  const [showDebugInfo, setShowDebugInfo] = useState(false);
  const [selectedPlayers, setSelectedPlayers] = useState<Player[]>([]);

  // Hooks personalizados
  const {
    tournaments,
    pairs,
    matches,
    games,
    loading,
    loadTournamentData,
    createTournament,
    updateTournament,
    deleteTournament,
  } = useTournamentData(user?.id);

  const {
    addPair,
    updatePairPlayers,
    deletePair,
    resetPairs,
  } = usePairManagement(selectedTournament?.id, user?.id);

  const {
    startTournament,
    generateMatches,
    updateMatch,
    updateGame,
    actionLoading,
  } = useTournamentActions(selectedTournament?.id, user?.id);

  const { showToast, hideToast, toast } = useToastNotifications();

  const { calculateWinner, tournamentWinner } = useWinnerCalculation(
    selectedTournament,
    pairs,
    matches
  );

  // Efectos
  useEffect(() => {
    testConnection();
  }, []);

  useEffect(() => {
    if (selectedTournament) {
      loadTournamentData(selectedTournament);
    }
  }, [selectedTournament, loadTournamentData]);

  useEffect(() => {
    if (isTournamentFinished && !tournamentWinner) {
      calculateWinner();
    }
  }, [isTournamentFinished, tournamentWinner, calculateWinner]);

  // Handlers
  const handleTournamentSelect = (tournament: Tournament) => {
    setSelectedTournament(tournament);
    setShowPlayerManager(false);
    setShowPairManager(false);
    setShowTournamentStatus(false);
    setShowDebugInfo(false);
  };

  const handleCreateTournament = async (name: string) => {
    try {
      const newTournament = await createTournament(name);
      if (newTournament) {
        setSelectedTournament(newTournament);
        showToast("Torneo creado exitosamente", "success");
      }
    } catch (error) {
      showToast("Error al crear el torneo", "error");
    }
  };

  const handleStartTournament = async () => {
    if (!selectedTournament || pairs.length < 2) {
      showToast("Necesitas al menos 2 pares para iniciar el torneo", "error");
      return;
    }

    try {
      await startTournament();
      showToast("Torneo iniciado exitosamente", "success");
    } catch (error) {
      showToast("Error al iniciar el torneo", "error");
    }
  };

  const handleReset = () => {
    resetPairs();
    setSelectedPlayers([]);
    showToast("Pares reseteados", "success");
  };

  const handleShowWinner = () => {
    setCurrentView("winner");
  };

  const handleHideWinner = () => {
    setCurrentView("main");
  };

  const handleBackToHome = () => {
    setSelectedTournament(null);
    setCurrentView("main");
  };

  const copyPublicLink = (tournamentId: string) => {
    const publicUrl = `${window.location.origin}/public/${tournamentId}`;
    navigator.clipboard.writeText(publicUrl);
    showToast("Enlace p칰blico copiado al portapapeles", "success");
  };

  const generatePublicLink = (tournamentId: string) => {
    return `${window.location.origin}/public/${tournamentId}`;
  };

  // C치lculos
  const sortedPairs = useMemo(() => {
    return [...pairs].sort((a, b) => {
      const aPoints = a.points || 0;
      const bPoints = b.points || 0;
      if (aPoints !== bPoints) {
        return bPoints - aPoints;
      }
      return (a.games_won || 0) - (b.games_won || 0);
    });
  }, [pairs]);

  const showWinnerScreen = currentView === "winner";

  const isTournamentFinished = useMemo(() => {
    return (
      matches.length > 0 &&
      matches.every((match) => match.status === "finished")
    );
  }, [matches]);

  const winner = useMemo(() => {
    return (
      tournamentWinner?.pair || (sortedPairs.length > 0 ? sortedPairs[0] : null)
    );
  }, [tournamentWinner, sortedPairs]);

  return (
    <div className="App">
      <ProtectedRoute>
        {/* Solo mostrar UserHeader cuando NO estemos en vista p칰blica NI en admin */}
        {currentView !== "public" &&
          currentView !== "admin-login" &&
          currentView !== "admin-dashboard" && 
          !isAdminLoggedIn && <UserHeader />}

              {currentView === "main" && !isAdminLoggedIn && (
                <MainLayout
                  selectedTournament={selectedTournament}
                  onTournamentSelect={setSelectedTournament}
                  loading={loading || actionLoading}
                  userId={user?.id}
                  pairs={pairs}
                  matches={matches}
                  pairStats={pairStats}
                  matchesByRound={matchesByRound}
                  showPlayerManager={showPlayerManager}
                  setShowPlayerManager={setShowPlayerManager}
                  showPairManager={showPairManager}
                  setShowPairManager={setShowPairManager}
                  showTournamentStatus={showTournamentStatus}
                  setShowTournamentStatus={setShowTournamentStatus}
                  showDebugInfo={showDebugInfo}
                  setShowDebugInfo={setShowDebugInfo}
                  selectedPlayers={selectedPlayers}
                  setSelectedPlayers={setSelectedPlayers}
                  setError={setError}
                  addPair={addPair}
                  updatePairPlayers={updatePairPlayers}
                  deletePair={deletePair}
                  onReset={handleReset}
                  loadTournamentData={() =>
                    selectedTournament && loadTournamentData(selectedTournament)
                  }
                  setForceRefresh={setForceRefresh}
                  forceRefresh={forceRefresh}
                  onStartTournament={handleStartTournament}
                  onCopyPublicLink={copyPublicLink}
                  generatePublicLink={generatePublicLink}
                  isTournamentFinished={isTournamentFinished}
                  winner={winner}
                  tournamentWinner={tournamentWinner}
                  onShowWinnerScreen={handleShowWinner}
                  onBackToHome={handleBackToHome}
                />
              )}

              {currentView === "public" && (
                <PublicTournamentView tournamentId={publicTournamentId!} />
              )}

              {currentView === "auth-callback" && (
                <AuthCallback onSuccess={() => setCurrentView("main")} />
              )}

              {currentView === "winner" && (
                <WinnerScreen
                  isVisible={showWinnerScreen}
                  winner={winner}
                  tournamentWinner={tournamentWinner}
                  onBackToManager={handleHideWinner}
                />
              )}

              {/* Rutas de Admin */}
              {currentView === "admin-login" && <AdminLogin />}
              {currentView === "admin-dashboard" && (
                <AdminRoute>
                  <AdminDashboard />
                </AdminRoute>
              )}
            </ProtectedRoute>

            <ModernToast
              message={toast.message}
              type={toast.type}
              isVisible={toast.isVisible}
              onClose={hideToast}
              duration={4000}
            />
          </div>
        </AdminProvider>
      </UserProvider>
    </ThemeProvider>
  );
}

function App() {
  return (
    <ThemeProvider>
      <UserProvider>
        <AppContent />
      </UserProvider>
    </ThemeProvider>
  );
}

export default App;
